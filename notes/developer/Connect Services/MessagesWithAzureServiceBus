What's a relay?
A relay is an object that performs synchronous, two-way communication between applications.
 Unlike queues and topics, it is not a temporary storage location for messages. 
 Instead, it provides bidirectional, unbuffered connections across network boundaries such as firewalls.
  Use a relay when you want direct communications between components as if they were located on the same network segment but separated by network security devices.

Service Bus Queues vs Queues in Azure storage accounts:
Storage Queues : 
    Simple and unsophesticated
    Supports unlimited queue size
    Maintains log of all messages
    Quick development
Azure Service Bus queues :
    80GB max size
    Supports larger message size - 256KB (std tier), 1MB (premium tier) vs 64KB in storage queues
    Supports both atleast once and atmost once delivery. 
    Guarantees FIFO
    Messages can be grouped into a transaction
    Role based access to queues 
    More options but takes time to develop

* An Azure Service Bus queue message must be larger than 64 KB but smaller than 256 KB.

* To make it easy to write code that sends and receives messages through Service Bus, Microsoft provides a library of .NET classes, which you can use in any .NET Framework language to interact with a Service Bus queue, topic, or relay.
You can include this library in your application by adding the Microsoft.Azure.ServiceBus NuGet package.
The most important class in this library for queues is the QueueClient class. You must start by instantiating this class both in sending and receiving components.

* The queue in Azure may be located thousands of miles away from sending and receiving components.
Even if it is physically close, slow connections and bandwidth contention may cause delays when a component calls a method on the queue.
For this reason, the Service Bus client library makes async methods available for interacting with the queues. We'll use these methods to avoid blocking a thread while waiting for calls to complete.
When sending a message to a queue, for example, use the QueueClient.SendAsync() method with the await keyword.

Type a message -> encode it in UTF8 -> send it asynchronously

Setting Filters on subscriptions to control which messages sent to the topic are delivered to them
Boolean filters - TrueFilter and FalseFilter -> either all or none of the messages delivered
SQL Filters - Messages are evaluated against a SQL query, those which qualify are delivered
Correlation Messages - Messages are evaluated against a set of conditions which are matched against properties of the message
